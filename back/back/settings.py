"""
Django settings for back project.

Generated by 'django-admin startproject' using Django 3.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import sys
from pathlib import Path


def get_from_env_or_file(var_name, default=None):
    file_var_name = '%s_FILE' % var_name
    path = os.environ.get(file_var_name)
    if path and os.path.isfile(path):
        with open(path, 'r') as f:
            return f.read()
    else:
        return os.environ.get(var_name, default)


TEST = 'test' in sys.argv
COLLECTSTATIC = 'collectstatic' in sys.argv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_from_env_or_file(
    'DJANGO_SECRET_KEY',
    'django-insecure-f)63a8(q@ykri+c1)=*y@5ma!ox%%@1dlgi2e@!v$952hlcdgx')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', '').lower() == 'true'

ALLOWED_HOSTS = [
    s.strip() for s in os.getenv(
        'DJANGO_ALLOWED_HOSTS', '.shanty.social').split(',')
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'django_celery_beat',
    'djcelery_email',
    'mail_templated',
    'powerdns',
    'rest_framework',
    'drf_recaptcha',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'xff.middleware.XForwardedForMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG:
    MIDDLEWARE.insert(2, 'whitenoise.middleware.WhiteNoiseMiddleware')

ROOT_URLCONF = 'back.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'back.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DJANGO_DB_PASSWORD = get_from_env_or_file('DJANGO_DB_PASSWORD', 'password')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DJANGO_DB_HOST', 'db'),
        'NAME': os.environ.get('DJANGO_DB_NAME', 'console'),
        'USER': os.environ.get('DJANGO_DB_USER', 'user'),
        'PASSWORD': DJANGO_DB_PASSWORD,
    }
}

REDIS_HOST = os.getenv('DJANGO_REDIS_HOST', 'website-redis')
REDIS_PORT = int(os.getenv('DJANGO_REDIS_PORT', '6379'))

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{REDIS_HOST}:{REDIS_PORT}/1',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = Path(BASE_DIR).joinpath('api', 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'api.User'
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

CELERY_BROKER_URL = os.environ.get(
    'CELERY_BROKER_URL', f'redis://{REDIS_HOST}:{REDIS_PORT}/0')
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_BEAT_SCHEDULER = os.environ.get(
    'CELERY_BEAT_SCHEDULER',
    'django_celery_beat.schedulers:DatabaseScheduler')
CELERY_COMMAND = ('celery', '-A', 'back', 'worker', '-l', 'info')
CELERY_AUTORELOAD = DEBUG
CELERY_ALWAYS_EAGER = TEST

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'api.oauth.OAuth2Authentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

EMAIL_BACKEND = os.environ.get(
    'DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')

CELERY_EMAIL_BACKEND = 'django_mailjet.backends.MailjetBackend'
MAILJET_API_KEY = get_from_env_or_file('DJANGO_MAILJET_API_KEY', None)
MAILJET_API_SECRET = get_from_env_or_file('DJANGO_MAILJET_API_SECRET', None)
DEFAULT_FROM_EMAIL = 'admin@shanty.social'

EMAIL_CONFIRM_DAYS = 7

ACME_DIRECTORY_URL = 'http://pebble/'
ACME_KEY_BITS = 2048
ACME_PKEY_BITS = 2048

ADMIN_ENABLED = False
FIXTURE_DIRS = [
    Path(BASE_DIR).joinpath('api', 'fixtures'),
]

DRF_RECAPTCHA_TESTING = TEST
DRF_RECAPTCHA_SECRET_KEY = get_from_env_or_file(
    'DJANGO_RECAPTCHA_SECRET_KEY', None)

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
XFF_TRUSTED_PROXY_DEPTH = 1
XFF_NO_SPOOFING = True

AUTHLIB_OAUTH2_PROVIDER = {
    'refresh_token_generator': True,
}

AUTHLIB_JWK = os.getenv('AUTHLIB_JWK', '/run/secrets/jwk')
AUTHLIB_JWK_PUB = os.getenv('AUTHLIB_JWK_PUB', '/run/secrets/jwk.pub')
AUTHLIB_OPENIDC_METADATA = {
    "issuer": "http://shanty.social/",
    "authorization_endpoint": "http://www.shanty.local:8000/api/oauth2/"
                            "authorize/",
    "device_authorization_endpoint": "http://www.shanty.local:8000/api/oauth2/"
                                    "device/code",
    "token_endpoint": "http://www.shanty.local:8000/api/oauth2//token",
    "userinfo_endpoint": "http://www.shanty.local:8000/api/users/whoami/",
    "revocation_endpoint": "http://www.shanty.local:8000/api/oauth2/revoke",
    "jwks_uri": "http://www.shanty.local:8000/api/oauth2/jwks/",
    "response_types_supported": [
        "code",
        "token",
        "id_token",
        "code token",
        "code id_token",
        "token id_token",
        "code token id_token",
        "none"
    ],
    "subject_types_supported": [
        "public"
    ],
    "id_token_signing_alg_values_supported": [
        "RS256"
    ],
    "scopes_supported": [
        "openid",
        "email",
        "profile"
    ],
    "token_endpoint_auth_methods_supported": [
        "client_secret_post",
        "client_secret_basic"
    ],
    "claims_supported": [
        "aud",
        "email",
        "email_verified",
        "exp",
        "family_name",
        "given_name",
        "iat",
        "iss",
        "locale",
        "name",
        "picture",
        "sub"
    ],
    "code_challenge_methods_supported": [
        "plain",
        "S256"
    ],
    "grant_types_supported": [
        "authorization_code",
        "refresh_token",
        "urn:ietf:params:oauth:grant-type:device_code",
        "urn:ietf:params:oauth:grant-type:jwt-bearer"
    ]
}

SHARED_DOMAINS = os.getenv(
    'DJANGO_SHARED_DOMAINS', 'shanty.social').split(',')

NAME_SERVERS = os.getenv(
    'DJANGO_NAME_SERVERS', '1.1.1.1,8.8.8.8').split(',')

if COLLECTSTATIC:
    STATICFILES_STORAGE = \
        'compress_staticfiles.storage.CompressStaticFilesStorage'
    BROTLI_STATIC_COMPRESSION = False

LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'filters': {
		'require_debug_false': {
			'()': 'django.utils.log.RequireDebugFalse',
		},
		'require_debug_true': {
			'()': 'django.utils.log.RequireDebugTrue',
		},
	},
	'formatters': {
		'django.server': {
			'()': 'django.utils.log.ServerFormatter',
			'format': '[%(server_time)s] %(message)s',
		}
	},
	'handlers': {
		'console': {
			'level': 'INFO',
			'filters': ['require_debug_true'],
			'class': 'logging.StreamHandler',
		},
		'console_debug_false': {
			'level': 'ERROR',
			'filters': ['require_debug_false'],
			'class': 'logging.StreamHandler',
		},
		'django.server': {
			'level': 'INFO',
			'class': 'logging.StreamHandler',
			'formatter': 'django.server',
		},
		'mail_admins': {
			'level': 'ERROR',
			'filters': ['require_debug_false'],
			'class': 'django.utils.log.AdminEmailHandler'
		}
	},
	'loggers': {
		'django': {
			'handlers': ['console', 'console_debug_false', 'mail_admins'],
			'level': 'INFO',
		},
		'django.server': {
			'handlers': ['django.server'],
			'level': 'INFO',
			'propagate': False,
		}
	}
}